@model FrontEndDevExtreme.Models.WorkItemEditModel

@{
    ViewData["Title"] = "Cập nhật công việc";
}

<h2>@ViewData["Title"]</h2>

@using (Html.BeginForm("Edit", "WorkItem", FormMethod.Post, new { id = "EditWorkItemForm" }))
{
    @Html.HiddenFor(m => m.WorkItemID)

    <div class="form-group">
        @Html.LabelFor(m => m.TaskName)
        @Html.TextBoxFor(m => m.TaskName, new { @class = "form-control" })
        @Html.ValidationMessageFor(m => m.TaskName, "", new { @class = "text-danger" })
    </div>

    <div class="form-group">
        @Html.Label("Trạng thái")
        <br />
        @foreach (var item in new[] {
    new { Text = "Chưa thực hiện", Value = 0 },
    new { Text = "Đang thực hiện", Value = 1 },
    new { Text = "Đã xong", Value = 2 }
    })
        {
            <div class="form-check form-check-inline">
                @Html.RadioButtonFor(m => m.Status, item.Value, new { @class = "form-check-input", id = $"Status-{item.Value}" })
                <label class="form-check-label" for="Status-@item.Value">@item.Text</label>
            </div>
        }
        @Html.ValidationMessageFor(m => m.Status, "", new { @class = "text-danger" })
    </div>

    <div class="form-group">
        @Html.LabelFor(m => m.Progress)
        @Html.TextBoxFor(m => m.Progress, new { @class = "form-control", type = "number", min = "0", max = "100" })
        @Html.ValidationMessageFor(m => m.Progress, "", new { @class = "text-danger" })
    </div>

    <div class="form-group">
        @Html.Label("Loại công việc")
        <br />
        @foreach (var type in new[] { "Tìm hiều", "Triển khai", "Báo cáo" })
        {
            <div class="form-check form-check-inline">
                @Html.RadioButtonFor(m => m.TaskType, type, new { @class = "form-check-input", id = $"TaskType-{type}" })
                <label class="form-check-label" for="TaskType-@type">@type</label>
            </div>
        }
        <div class="form-check form-check-inline ml-4">
            @Html.CheckBoxFor(m => m.IsPinned, new { @class = "form-check-input", id = "IsPinned" })
            @Html.LabelFor(m => m.IsPinned, new { @class = "form-check-label" })
        </div>
        @Html.ValidationMessageFor(m => m.TaskType, "", new { @class = "text-danger" })
    </div>

    <div class="form-group">
        @Html.Label("Độ ưu tiên")
        <br />
        @foreach (var item in new[] {
    new { Text = "Thấp", Value = 1 },
    new { Text = "Trung bình", Value = 2 },
    new { Text = "Cao", Value = 3 }
    })
        {
            <div class="form-check form-check-inline">
                @Html.RadioButtonFor(m => m.Priority, item.Value, new { @class = "form-check-input", id = $"Priority-{item.Value}" })
                <label class="form-check-label" for="Priority-@item.Value">@item.Text</label>
            </div>
        }
        @Html.ValidationMessageFor(m => m.Priority, "", new { @class = "text-danger" })
    </div>

    <div class="form-group">
        @Html.LabelFor(m => m.StartDate)
        @Html.TextBoxFor(m => m.StartDate, "{0:yyyy-MM-dd}", new { @class = "form-control", type = "date" })
        @Html.ValidationMessageFor(m => m.StartDate, "", new { @class = "text-danger" })
    </div>

    <div class="form-group">
        @Html.LabelFor(m => m.EndDate)
        @Html.TextBoxFor(m => m.EndDate, "{0:yyyy-MM-dd}", new { @class = "form-control", type = "date" })
        @Html.ValidationMessageFor(m => m.EndDate, "", new { @class = "text-danger" })
    </div>

    <div class="form-group">
        @Html.LabelFor(m => m.AssignerID, "Người giao việc")
        @Html.DropDownListFor(m => m.AssignerID, new SelectList(ViewBag.Users, "UserID", "UserName", Model.AssignerID), "Chọn người giao việc", new { @class = "form-control" })
        @Html.ValidationMessageFor(m => m.AssignerID, "", new { @class = "text-danger" })
    </div>

    <div class="form-group">
        <label>Chọn phòng ban nhận</label>
        <div class="input-group">
            <select id="SelectedDepartmentID" class="form-control">
                <option value="">Chọn phòng ban</option>
                @foreach (var dept in ViewBag.Departments)
                {
                    <option value="@dept.DepartmentID">@dept.DepartmentName</option>
                }
            </select>
            <div class="input-group-append">
                <button type="button" class="btn btn-secondary" onclick="addDepartment()">Thêm</button>
            </div>
        </div>
        <ul id="department-list" class="mt-2"></ul>
    </div>

    <div class="form-group">
        <label>Chọn người nhận công việc</label>
        <div class="input-group">
            <select id="SelectedUserID" class="form-control">
                <option value="">Chọn người</option>
                @foreach (var user in ViewBag.Users)
                {
                    <option value="@user.UserID">@user.UserName</option>
                }
            </select>
            <div class="input-group-append">
                <button type="button" class="btn btn-secondary" onclick="addUser()">Thêm</button>
            </div>
        </div>
        <ul id="user-list" class="mt-2"></ul>
    </div>

    <a href="@Url.Action("Index", "WorkItem")" class="btn btn-secondary ml-2">Đóng</a>
    <button type="submit" class="btn btn-primary">Cập nhật</button>
}

@using (Html.BeginForm("Delete", "WorkItem", FormMethod.Post, new { onsubmit = "return confirm('Bạn có chắc chắn muốn xóa công việc này?');" }))
{
    @Html.Hidden("id", Model.WorkItemID)
    <button type="submit" class="btn btn-danger">Xóa công việc</button>
}

@section Scripts {
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script>
        var selectedDepartments = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.DepartmentIDs ?? new List<int>()));
        var selectedUsers = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.UserIDs ?? new List<int>()));

        function addDepartment() {
            var selected = $("#SelectedDepartmentID").val();
            var text = $("#SelectedDepartmentID option:selected").text();
            if (selected && !selectedDepartments.includes(selected)) {
                selectedDepartments.push(selected);
                $("#department-list").append(
                    `<li data-id="${selected}">${text} <a href="#" onclick="removeDepartment('${selected}'); return false;">[x]</a><input type="hidden" name="DepartmentIDs" value="${selected}" /></li>`
                );
            }
        }

        function removeDepartment(id) {
            selectedDepartments = selectedDepartments.filter(x => x !== id);
            $(`#department-list li[data-id='${id}']`).remove();
        }

        function addUser() {
            var selected = $("#SelectedUserID").val();
            var text = $("#SelectedUserID option:selected").text();
            if (selected && !selectedUsers.includes(selected)) {
                selectedUsers.push(selected);
                $("#user-list").append(
                    `<li data-id="${selected}">${text} <a href="#" onclick="removeUser('${selected}'); return false;">[x]</a><input type="hidden" name="UserIDs" value="${selected}" /></li>`
                );
            }
        }

        function removeUser(id) {
            selectedUsers = selectedUsers.filter(x => x !== id);
            $(`#user-list li[data-id='${id}']`).remove();
        }

        // Load lại danh sách đã chọn khi vào trang Edit
        $(document).ready(function () {
            selectedDepartments.forEach(function (id) {
                var text = $(`#SelectedDepartmentID option[value='${id}']`).text();
                $("#department-list").append(
                    `<li data-id="${id}">${text} <a href="#" onclick="removeDepartment('${id}'); return false;">[x]</a><input type="hidden" name="DepartmentIDs" value="${id}" /></li>`
                );
            });

            selectedUsers.forEach(function (id) {
                var text = $(`#SelectedUserID option[value='${id}']`).text();
                $("#user-list").append(
                    `<li data-id="${id}">${text} <a href="#" onclick="removeUser('${id}'); return false;">[x]</a><input type="hidden" name="UserIDs" value="${id}" /></li>`
                );
            });

            // Khởi tạo trạng thái và tiến độ ban đầu
            updateProgressByStatus();
            updateStatusByProgress();
        });

        // Hàm cập nhật trạng thái theo tiến độ
        function updateStatusByProgress() {
            var progress = parseInt($("input[name='Progress']").val());

            if (isNaN(progress) || progress <= 0) {
                $("input[name='Status'][value='0']").prop("checked", true); // Chưa thực hiện
            } else if (progress >= 100) {
                $("input[name='Status'][value='2']").prop("checked", true); // Đã xong
            } else {
                $("input[name='Status'][value='1']").prop("checked", true); // Đang thực hiện
            }
        }

        // Hàm cập nhật tiến độ theo trạng thái
        function updateProgressByStatus() {
            var status = $("input[name='Status']:checked").val();
            var $progress = $("input[name='Progress']");

            if (status === "0") { // Chưa thực hiện
                $progress.val(0);
                $progress.prop("readonly", false); // Cho phép chỉnh sửa tiến độ khi trạng thái là Chưa thực hiện
            } else if (status === "1") { // Đang thực hiện
                $progress.prop("readonly", false); // Cho phép chỉnh sửa tiến độ khi trạng thái là Đang thực hiện
            } else if (status === "2") { // Đã xong
                $progress.val(100);
                $progress.prop("readonly", true); // Không cho phép chỉnh sửa tiến độ khi trạng thái là Đã xong
            }
        }

        $(document).ready(function () {
            // Gán sự kiện thay đổi khi thay đổi tiến độ
            $("input[name='Progress']").on('input', function () {
                updateStatusByProgress();
            });

            // Gán sự kiện khi chọn trạng thái
            $("input[name='Status']").change(function () {
                updateProgressByStatus();
            });
        });
    </script>
}
