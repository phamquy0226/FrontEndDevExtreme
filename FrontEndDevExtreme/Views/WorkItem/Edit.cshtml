@model FrontEndDevExtreme.Models.WorkItemEditModel

@{
    ViewData["Title"] = "Cập nhật công việc";
}

<div class="container-fluid py-4">
    <div class="card shadow border-0 rounded-3">
        <div class="card-header bg-primary bg-gradient text-white py-3">
            <h2 class="h4 mb-0"><i class="bi bi-pencil-square me-2"></i>@ViewData["Title"]</h2>
        </div>
        <div class="card-body p-4">
            @using (Html.BeginForm("Edit", "WorkItem", FormMethod.Post, new { id = "EditWorkItemForm", @class = "needs-validation" }))
            {
                @Html.HiddenFor(m => m.WorkItemID)

                <div class="row g-4">
                    <div class="col-md-6">
                        <div class="card h-100 shadow-sm border-0 rounded-3">
                            <div class="card-header bg-light py-3">
                                <h5 class="mb-0 text-primary">Thông tin cơ bản</h5>
                            </div>
                            <div class="card-body p-4">
                                <div class="mb-4">
                                    @Html.LabelFor(m => m.TaskName, new { @class = "form-label fw-semibold" })
                                    <div class="input-group">
                                        <span class="input-group-text bg-light"><i class="bi bi-list-task"></i></span>
                                        @Html.TextBoxFor(m => m.TaskName, new { @class = "form-control form-control-lg", placeholder = "Nhập tên công việc" })
                                    </div>
                                    @Html.ValidationMessageFor(m => m.TaskName, "", new { @class = "text-danger small" })
                                </div>

                                <div class="mb-4">
                                    @Html.LabelFor(m => m.Progress, new { @class = "form-label fw-semibold" })
                                    <div class="input-group">
                                        <span class="input-group-text bg-light"><i class="bi bi-graph-up"></i></span>
                                        @Html.TextBoxFor(m => m.Progress, new { @class = "form-control", type = "number", min = "0", max = "100", aria_describedby = "progress-addon" })
                                        <span class="input-group-text bg-primary text-white" id="progress-addon">%</span>
                                    </div>
                                    <div class="progress mt-2" style="height: 10px;">
                                        <div class="progress-bar bg-success" role="progressbar" style="width: @(Model.Progress)%;" aria-valuenow="@Model.Progress" aria-valuemin="0" aria-valuemax="100"></div>
                                    </div>
                                    @Html.ValidationMessageFor(m => m.Progress, "", new { @class = "text-danger small" })
                                </div>

                                <div class="row g-3">
                                    <div class="col-md-6">
                                        <div class="mb-3">
                                            @Html.LabelFor(m => m.StartDate, new { @class = "form-label fw-semibold" })
                                            <div class="input-group">
                                                <span class="input-group-text bg-light"><i class="bi bi-calendar-event"></i></span>
                                                @Html.TextBoxFor(m => m.StartDate, "{0:yyyy-MM-dd}", new { @class = "form-control", type = "date" })
                                            </div>
                                            @Html.ValidationMessageFor(m => m.StartDate, "", new { @class = "text-danger small" })
                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <div class="mb-3">
                                            @Html.LabelFor(m => m.EndDate, new { @class = "form-label fw-semibold" })
                                            <div class="input-group">
                                                <span class="input-group-text bg-light"><i class="bi bi-calendar-check"></i></span>
                                                @Html.TextBoxFor(m => m.EndDate, "{0:yyyy-MM-dd}", new { @class = "form-control", type = "date" })
                                            </div>
                                            @Html.ValidationMessageFor(m => m.EndDate, "", new { @class = "text-danger small" })
                                        </div>
                                    </div>
                                </div>

                                <div class="mb-3">
                                    @Html.LabelFor(m => m.AssignerID, "Người giao việc", new { @class = "form-label fw-semibold" })
                                    <div class="input-group">
                                        <span class="input-group-text bg-light"><i class="bi bi-person"></i></span>
                                        @Html.DropDownListFor(m => m.AssignerID, new SelectList(ViewBag.Users, "UserID", "UserName", Model.AssignerID), "Chọn người giao việc", new { @class = "form-select" })
                                    </div>
                                    @Html.ValidationMessageFor(m => m.AssignerID, "", new { @class = "text-danger small" })
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="col-md-6">
                        <div class="card h-100 shadow-sm border-0 rounded-3">
                            <div class="card-header bg-light py-3">
                                <h5 class="mb-0 text-primary">Thông tin bổ sung</h5>
                            </div>
                            <div class="card-body p-4">
                                <div class="mb-4">
                                    <label class="form-label fw-semibold">Trạng thái</label>
                                    <div class="d-flex gap-2 flex-wrap">
                                        @foreach (var item in new[] {
                                    new { Text = "Chưa thực hiện", Value = 0, Color = "secondary" },
                                    new { Text = "Đang thực hiện", Value = 1, Color = "primary" },
                                    new { Text = "Đã xong", Value = 2, Color = "success" }
                                    })
                                        {
                                            <div class="form-check form-check-inline p-2 border rounded-pill @(Model.Status == item.Value ? $"bg-{item.Color} bg-opacity-10 border-{item.Color}" : "bg-light")">
                                                @Html.RadioButtonFor(m => m.Status, item.Value, new { @class = "form-check-input", id = $"Status-{item.Value}" })
                                                <label class="form-check-label @(Model.Status == item.Value ? $"text-{item.Color} fw-bold" : "")" for="Status-@item.Value">
                                                    @if (item.Value == 0)
                                                    {
                                                        <i class="bi bi-hourglass me-1"></i>
                                                    }
                                                    @if (item.Value == 1)
                                                    {
                                                        <i class="bi bi-play-circle me-1"></i>
                                                    }
                                                    @if (item.Value == 2)
                                                    {
                                                        <i class="bi bi-check-circle me-1"></i>
                                                    }
                                                    @item.Text
                                                </label>
                                            </div>
                                        }
                                    </div>
                                    @Html.ValidationMessageFor(m => m.Status, "", new { @class = "text-danger small" })
                                </div>

                                <div class="mb-4">
                                    <label class="form-label fw-semibold">Loại công việc</label>
                                    <div class="d-flex gap-2 flex-wrap">
                                        @foreach (var type in new[] {
                                    new { Type = "Research", Icon = "bi-search" },
                                    new { Type = "Deploy", Icon = "bi-rocket" },
                                    new { Type = "Report", Icon = "bi-file-earmark-text" }
                                    })
                                        {
                                            <div class="form-check form-check-inline p-2 border rounded-pill @(Model.TaskType == type.Type ? "bg-info bg-opacity-10 border-info" : "bg-light")">
                                                @Html.RadioButtonFor(m => m.TaskType, type.Type, new { @class = "form-check-input", id = $"TaskType-{type.Type}" })
                                                <label class="form-check-label @(Model.TaskType == type.Type ? "text-info fw-bold" : "")" for="TaskType-@type.Type">
                                                    <i class="bi @type.Icon me-1"></i> @type.Type
                                                </label>
                                            </div>
                                        }
                                    </div>
                                    @Html.ValidationMessageFor(m => m.TaskType, "", new { @class = "text-danger small" })
                                </div>

                                <div class="mb-4">
                                    <label class="form-label fw-semibold">Độ ưu tiên</label>
                                    <div class="d-flex gap-2 flex-wrap">
                                        @foreach (var item in new[] {
                                    new { Text = "Thấp", Value = 1, Color = "success", Icon = "arrow-down" },
                                    new { Text = "Trung bình", Value = 2, Color = "warning", Icon = "dash" },
                                    new { Text = "Cao", Value = 3, Color = "danger", Icon = "arrow-up" }
                                    })
                                        {
                                            <div class="form-check form-check-inline p-2 border rounded-pill @(Model.Priority == item.Value ? $"bg-{item.Color} bg-opacity-10 border-{item.Color}" : "bg-light")">
                                                @Html.RadioButtonFor(m => m.Priority, item.Value, new { @class = "form-check-input", id = $"Priority-{item.Value}" })
                                                <label class="form-check-label @(Model.Priority == item.Value ? $"text-{item.Color} fw-bold" : "")" for="Priority-@item.Value">
                                                    <i class="bi bi-@item.Icon-circle-fill me-1"></i> @item.Text
                                                </label>
                                            </div>
                                        }
                                    </div>
                                    @Html.ValidationMessageFor(m => m.Priority, "", new { @class = "text-danger small" })
                                </div>

                                <div class="form-check form-switch form-check-lg mb-3">
                                    @Html.CheckBoxFor(m => m.IsPinned, new { @class = "form-check-input", id = "IsPinned" })
                                    <label class="form-check-label fw-semibold" for="IsPinned">
                                        <i class="bi bi-pin-angle-fill text-warning me-2"></i> Ghim công việc
                                    </label>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="row mt-4 g-4">
                    <div class="col-md-6">
                        <div class="card shadow-sm border-0 rounded-3">
                            <div class="card-header bg-light d-flex justify-content-between align-items-center py-3">
                                <h5 class="mb-0 text-primary"><i class="bi bi-building me-2"></i>Phòng ban nhận</h5>
                                <span class="badge bg-primary rounded-pill" id="dept-count">@(Model.DepartmentIDs?.Count() ?? 0)</span>
                            </div>
                            <div class="card-body p-4">
                                <div class="input-group mb-3">
                                    <span class="input-group-text bg-light"><i class="bi bi-search"></i></span>
                                    <select id="SelectedDepartmentID" class="form-select">
                                        <option value="">Chọn phòng ban</option>
                                        @foreach (var dept in ViewBag.Departments)
                                        {
                                            <option value="@dept.DepartmentID">@dept.DepartmentName</option>
                                        }
                                    </select>
                                    <button type="button" class="btn btn-primary" onclick="addDepartment()">
                                        <i class="bi bi-plus-lg"></i> Thêm
                                    </button>
                                </div>
                                <div class="border rounded-3 p-2" style="max-height: 200px; overflow-y: auto;">
                                    <ul id="department-list" class="list-group list-group-flush mb-0"></ul>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="col-md-6">
                        <div class="card shadow-sm border-0 rounded-3">
                            <div class="card-header bg-light d-flex justify-content-between align-items-center py-3">
                                <h5 class="mb-0 text-primary"><i class="bi bi-people me-2"></i>Người nhận công việc</h5>
                                <span class="badge bg-primary rounded-pill" id="user-count">@(Model.UserIDs?.Count() ?? 0)</span>
                            </div>
                            <div class="card-body p-4">
                                <div class="input-group mb-3">
                                    <span class="input-group-text bg-light"><i class="bi bi-search"></i></span>
                                    <select id="SelectedUserID" class="form-select">
                                        <option value="">Chọn người</option>
                                        @foreach (var user in ViewBag.Users)
                                        {
                                            <option value="@user.UserID">@user.UserName</option>
                                        }
                                    </select>
                                    <button type="button" class="btn btn-primary" onclick="addUser()">
                                        <i class="bi bi-plus-lg"></i> Thêm
                                    </button>
                                </div>
                                <div class="border rounded-3 p-2" style="max-height: 200px; overflow-y: auto;">
                                    <ul id="user-list" class="list-group list-group-flush mb-0"></ul>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="mt-4 d-flex justify-content-end gap-2">
                    <a href="@Url.Action("Index", "WorkItem")" class="btn btn-light btn-lg px-4">
                        <i class="bi bi-x-lg me-2"></i>Đóng
                    </a>
                    <button type="submit" class="btn btn-primary btn-lg px-4">
                        <i class="bi bi-save me-2"></i>Cập nhật
                    </button>
                </div>
            }
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script>
        var selectedDepartments = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.DepartmentIDs ?? new List<int>()));
        var selectedUsers = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.UserIDs ?? new List<int>()));

        function addDepartment() {
            var selected = $("#SelectedDepartmentID").val();
            var text = $("#SelectedDepartmentID option:selected").text();
            if (selected && !selectedDepartments.includes(parseInt(selected))) {
                selectedDepartments.push(parseInt(selected));
                $("#department-list").append(
                    `<li class="list-group-item border-0 border-bottom d-flex justify-content-between align-items-center py-2" data-id="${selected}">
                        <div>
                            <i class="bi bi-building text-primary me-2"></i>
                            <span class="fw-medium">${text}</span>
                        </div>
                        <div>
                            <button type="button" class="btn btn-sm btn-outline-danger rounded-circle" aria-label="Xóa" onclick="removeDepartment('${selected}');">
                                <i class="bi bi-x"></i>
                            </button>
                            <input type="hidden" name="DepartmentIDs" value="${selected}" />
                        </div>
                    </li>`
                );
                updateDepartmentCount();
            }
            $("#SelectedDepartmentID").val(""); // Clear the dropdown after adding
        }

        function removeDepartment(id) {
            selectedDepartments = selectedDepartments.filter(x => x !== parseInt(id));
            $(`#department-list li[data-id='${id}']`).remove();
            updateDepartmentCount();
        }

        function addUser() {
            var selected = $("#SelectedUserID").val();
            var text = $("#SelectedUserID option:selected").text();
            if (selected && !selectedUsers.includes(parseInt(selected))) {
                selectedUsers.push(parseInt(selected));
                $("#user-list").append(
                    `<li class="list-group-item border-0 border-bottom d-flex justify-content-between align-items-center py-2" data-id="${selected}">
                        <div>
                            <i class="bi bi-person-circle text-primary me-2"></i>
                            <span class="fw-medium">${text}</span>
                        </div>
                        <div>
                            <button type="button" class="btn btn-sm btn-outline-danger rounded-circle" aria-label="Xóa" onclick="removeUser('${selected}');">
                                <i class="bi bi-x"></i>
                            </button>
                            <input type="hidden" name="UserIDs" value="${selected}" />
                        </div>
                    </li>`
                );
                updateUserCount();
            }
            $("#SelectedUserID").val(""); // Clear the dropdown after adding
        }

        function removeUser(id) {
            selectedUsers = selectedUsers.filter(x => x !== parseInt(id));
            $(`#user-list li[data-id='${id}']`).remove();
            updateUserCount();
        }

        function updateDepartmentCount() {
            $("#dept-count").text(selectedDepartments.length);
        }

        function updateUserCount() {
            $("#user-count").text(selectedUsers.length);
        }

        function updateProgressBar() {
            var progress = parseInt($("input[name='Progress']").val());
            if (isNaN(progress)) progress = 0;
            if (progress > 100) progress = 100;
            if (progress < 0) progress = 0;

            $(".progress-bar").css("width", progress + "%");
            $(".progress-bar").attr("aria-valuenow", progress);

            // Change color based on progress
            $(".progress-bar").removeClass("bg-danger bg-warning bg-info bg-success");
            if (progress < 25) {
                $(".progress-bar").addClass("bg-danger");
            } else if (progress < 50) {
                $(".progress-bar").addClass("bg-warning");
            } else if (progress < 75) {
                $(".progress-bar").addClass("bg-info");
            } else {
                $(".progress-bar").addClass("bg-success");
            }
        }

        $(document).ready(function () {
            // Add Bootstrap Icons CSS
            $("head").append('<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.1/font/bootstrap-icons.css">');

            // Load initial departments
            selectedDepartments.forEach(function (id) {
                var text = $(`#SelectedDepartmentID option[value='${id}']`).text();
                $("#department-list").append(
                    `<li class="list-group-item border-0 border-bottom d-flex justify-content-between align-items-center py-2" data-id="${id}">
                        <div>
                            <i class="bi bi-building text-primary me-2"></i>
                            <span class="fw-medium">${text}</span>
                        </div>
                        <div>
                            <button type="button" class="btn btn-sm btn-outline-danger rounded-circle" aria-label="Xóa" onclick="removeDepartment('${id}');">
                                <i class="bi bi-x"></i>
                            </button>
                            <input type="hidden" name="DepartmentIDs" value="${id}" />
                        </div>
                    </li>`
                );
            });
            updateDepartmentCount();

            // Load initial users
            selectedUsers.forEach(function (id) {
                var text = $(`#SelectedUserID option[value='${id}']`).text();
                $("#user-list").append(
                    `<li class="list-group-item border-0 border-bottom d-flex justify-content-between align-items-center py-2" data-id="${id}">
                        <div>
                            <i class="bi bi-person-circle text-primary me-2"></i>
                            <span class="fw-medium">${text}</span>
                        </div>
                        <div>
                            <button type="button" class="btn btn-sm btn-outline-danger rounded-circle" aria-label="Xóa" onclick="removeUser('${id}');">
                                <i class="bi bi-x"></i>
                            </button>
                            <input type="hidden" name="UserIDs" value="${id}" />
                        </div>
                    </li>`
                );
            });
            updateUserCount();

            updateProgressByStatus();
            updateStatusByProgress();
            updateProgressBar();
        });

        function updateStatusByProgress() {
            var progress = parseInt($("input[name='Progress']").val());

            // Remove all status highlight classes
            $(".form-check-inline").removeClass(function (index, className) {
                return (className.match(/(^|\s)bg-\S+/g) || []).join(' ');
            });
            $(".form-check-label").removeClass(function (index, className) {
                return (className.match(/(^|\s)text-\S+/g) || []).join(' ');
            });
            $(".form-check-label").removeClass("fw-bold");

            // Add appropriate classes based on status
            if (isNaN(progress) || progress <= 0) {
                $("input[name='Status'][value='0']").prop("checked", true);
                $("input[name='Status'][value='0']").closest(".form-check-inline").addClass("bg-secondary bg-opacity-10 border-secondary");
                $("input[name='Status'][value='0']").siblings("label").addClass("text-secondary fw-bold");
            } else if (progress >= 100) {
                $("input[name='Status'][value='2']").prop("checked", true);
                $("input[name='Status'][value='2']").closest(".form-check-inline").addClass("bg-success bg-opacity-10 border-success");
                $("input[name='Status'][value='2']").siblings("label").addClass("text-success fw-bold");
            } else {
                $("input[name='Status'][value='1']").prop("checked", true);
                $("input[name='Status'][value='1']").closest(".form-check-inline").addClass("bg-primary bg-opacity-10 border-primary");
                $("input[name='Status'][value='1']").siblings("label").addClass("text-primary fw-bold");
            }
        }

        function updateProgressByStatus() {
            var status = $("input[name='Status']:checked").val();
            var $progress = $("input[name='Progress']");

            if (status === "0") {
                $progress.val(0);
                $progress.prop("readonly", false);
            } else if (status === "1") {
                if ($progress.val() == 0 || $progress.val() == 100) {
                    $progress.val(50);
                }
                $progress.prop("readonly", false);
            } else if (status === "2") {
                $progress.val(100);
                $progress.prop("readonly", true);
            }

            updateProgressBar();
        }

        $(document).ready(function () {
            // Progress change handler
            $("input[name='Progress']").on('input', function () {
                updateStatusByProgress();
                updateProgressBar();
            });

            // Status change handler
            $("input[name='Status']").change(function () {
                updateProgressByStatus();
            });

            // Add validation styling
            $("#EditWorkItemForm").on("submit", function(event) {
                if (!this.checkValidity()) {
                    event.preventDefault();
                    event.stopPropagation();
                }
                $(this).addClass("was-validated");
            });
        });
    </script>
}