@model FrontEndDevExtreme.Models.WorkItemCreateModel

@{
    ViewData["Title"] = "Tạo công việc mới";
}

<h2>@ViewData["Title"]</h2>

@using (Html.BeginForm("Create", "WorkItem", FormMethod.Post, new { id = "createWorkItemForm" }))
{
    <div class="form-group">
        @Html.LabelFor(m => m.TaskName)
        @Html.TextBoxFor(m => m.TaskName, new { @class = "form-control" })
        @Html.ValidationMessageFor(m => m.TaskName, "", new { @class = "text-danger" })
    </div>

    <div class="form-group">
        @Html.Label("Trạng thái")
        <br />
        @foreach (var item in new[] {
    new { Text = "Chưa thực hiện", Value = 0 },
    new { Text = "Đang thực hiện", Value = 1 },
    new { Text = "Đã xong", Value = 2 }
    })
        {
            <div class="form-check form-check-inline">
                @Html.RadioButtonFor(m => m.Status, item.Value, new { @class = "form-check-input", id = $"Status-{item.Value}" })
                <label class="form-check-label" for="Status-@item.Value">@item.Text</label>
            </div>
        }
        @Html.ValidationMessageFor(m => m.Status, "", new { @class = "text-danger" })
    </div>

    <div class="form-group">
        @Html.LabelFor(m => m.Progress)
        @Html.TextBoxFor(m => m.Progress, new { @class = "form-control", type = "number", min = "0", max = "100" })
        @Html.ValidationMessageFor(m => m.Progress, "", new { @class = "text-danger" })
    </div>

    <div class="form-group">
        @Html.Label("Loại công việc")
        <br />
        @foreach (var type in new[] { "Tìm hiều", "Triển khai", "Báo cáo" })
        {
            <div class="form-check form-check-inline">
                @Html.RadioButtonFor(m => m.TaskType, type, new { @class = "form-check-input", id = $"TaskType-{type}" })
                <label class="form-check-label" for="TaskType-@type">@type</label>
            </div>
        }
        <div class="form-check form-check-inline ml-4">
            @Html.CheckBoxFor(m => m.IsPinned, new { @class = "form-check-input", id = "IsPinned" })
            @Html.LabelFor(m => m.IsPinned, new { @class = "form-check-label" })
        </div>
        @Html.ValidationMessageFor(m => m.TaskType, "", new { @class = "text-danger" })
    </div>

    <div class="form-group">
        @Html.Label("Độ ưu tiên")
        <br />
        @foreach (var item in new[] {
    new { Text = "Thấp", Value = 0 },
    new { Text = "Trung bình", Value = 1 },
    new { Text = "Cao", Value = 2 }
    })
        {
            <div class="form-check form-check-inline">
                @Html.RadioButtonFor(m => m.Priority, item.Value, new { @class = "form-check-input", id = $"Priority-{item.Value}" })
                <label class="form-check-label" for="Priority-@item.Value">@item.Text</label>
            </div>
        }
        @Html.ValidationMessageFor(m => m.Priority, "", new { @class = "text-danger" })
    </div>

    <div class="form-group">
        @Html.LabelFor(m => m.StartDate)
        @Html.TextBoxFor(m => m.StartDate, "{0:yyyy-MM-dd}", new { @class = "form-control", type = "date" })
        @Html.ValidationMessageFor(m => m.StartDate, "", new { @class = "text-danger" })
    </div>

    <div class="form-group">
        @Html.LabelFor(m => m.EndDate)
        @Html.TextBoxFor(m => m.EndDate, "{0:yyyy-MM-dd}", new { @class = "form-control", type = "date" })
        @Html.ValidationMessageFor(m => m.EndDate, "", new { @class = "text-danger" })
    </div>

    <div class="form-group">
        @Html.LabelFor(m => m.AssignerID, "Người giao việc")
        @Html.DropDownListFor(m => m.AssignerID, new SelectList(ViewBag.Users, "UserID", "UserName"), "Chọn người giao việc", new { @class = "form-control" })
        @Html.ValidationMessageFor(m => m.AssignerID, "", new { @class = "text-danger" })
    </div>

    <div class="form-group">
        <label>Chọn phòng ban nhận</label>
        <div class="input-group">
            <select id="SelectedDepartmentID" class="form-control">
                <option value="">Chọn phòng ban</option>
                @foreach (var dept in ViewBag.Departments)
                {
                    <option value="@dept.DepartmentID">@dept.DepartmentName</option>
                }
            </select>
            <div class="input-group-append">
                <button type="button" class="btn btn-secondary" onclick="addDepartment()">Thêm</button>
            </div>
        </div>
        <ul id="department-list" class="mt-2"></ul>
        <input type="hidden" id="DepartmentIDs" name="DepartmentIDs" value="" />
    </div>

    <div class="form-group">
        <label>Chọn người nhận công việc</label>
        <div class="input-group">
            <select id="SelectedUserID" class="form-control">
                <option value="">Chọn người</option>
                @foreach (var user in ViewBag.Users)
                {
                    <option value="@user.UserID">@user.UserName</option>
                }
            </select>
            <div class="input-group-append">
                <button type="button" class="btn btn-secondary" onclick="addUser()">Thêm</button>
            </div>
        </div>
        <ul id="user-list" class="mt-2"></ul>
        <input type="hidden" id="UserIDs" name="UserIDs" value="" />
    </div>

    <button type="submit" class="btn btn-primary">Tạo mới</button>
}

@section Scripts {
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-validate/1.19.3/jquery.validate.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-validate/1.19.3/additional-methods.min.js"></script>
    <script>
        var selectedDepartments = [];
        var selectedUsers = [];

        function addDepartment() {
            var selected = $("#SelectedDepartmentID").val();
            var text = $("#SelectedDepartmentID option:selected").text();
            if (selected && !selectedDepartments.includes(selected)) {
                selectedDepartments.push(selected);
                $("#department-list").append(`<li data-id="${selected}">${text} <a href="#" onclick="removeDepartment('${selected}'); return false;">[x]</a></li>`);
                updateHiddenDepartmentInput();
            }
        }

        function removeDepartment(id) {
            selectedDepartments = selectedDepartments.filter(x => x !== id);
            $(`#department-list li[data-id='${id}']`).remove();
            updateHiddenDepartmentInput();
        }

        function updateHiddenDepartmentInput() {
            $("#DepartmentIDs").val(selectedDepartments.join(","));
        }

        function addUser() {
            var selected = $("#SelectedUserID").val();
            var text = $("#SelectedUserID option:selected").text();
            if (selected && !selectedUsers.includes(selected)) {
                selectedUsers.push(selected);
                $("#user-list").append(`<li data-id="${selected}">${text} <a href="#" onclick="removeUser('${selected}'); return false;">[x]</a></li>`);
                updateHiddenUserInput();
            }
        }

        function removeUser(id) {
            selectedUsers = selectedUsers.filter(x => x !== id);
            $(`#user-list li[data-id='${id}']`).remove();
            updateHiddenUserInput();
        }

        function updateHiddenUserInput() {
            $("#UserIDs").val(selectedUsers.join(","));
        }
    </script>
}

