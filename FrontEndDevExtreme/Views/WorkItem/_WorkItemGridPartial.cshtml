@model List<FrontEndDevExtreme.Models.WorkItemViewModel>
@{
    ViewData["Title"] = "Danh sách công việc";
    var currentQuery = Context.Request.Query;
}
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
<link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css" rel="stylesheet" />
<link href="~/css/index.css" rel="stylesheet" />
<link href="~/css/note.css" rel="stylesheet" />


<div class="card animate-in" style="animation-delay: 0.2s">
    <div class="card-header bg-light">
        <div class="d-flex justify-content-between align-items-center">
            <h5 class="fw-bold mb-0">
                <i class="bi bi-list-task me-2"></i> Danh sách công việc
            </h5>
        </div>
    </div>
    <div class="card-body p-0">
        <div id="gridContainer" class="drag-scroll-container" style="overflow: auto; cursor: grab;">
            @(Html.DevExtreme().DataGrid<FrontEndDevExtreme.Models.WorkItemViewModel>()
                    .ID("workItemGrid")
                    .DataSource(Model)

                    .ShowBorders(true)
                    .OnContentReady("onGridContentReady")
                    .RowAlternationEnabled(true)
                    .WordWrapEnabled(true)
                    .AllowColumnReordering(true)     
                    .AllowColumnResizing(true)
                    .ColumnAutoWidth(true)
                    .Scrolling(s => s.Mode(GridScrollingMode.Standard))
                    .ColumnMinWidth(100)
                    .HoverStateEnabled(true)
                    .Paging(p => p.PageSize(10))
                    .Pager(p =>
                    {
                        p.ShowPageSizeSelector(true)
                    .AllowedPageSizes(new[] { 10, 20, 50, 100, 200, 500 })
                    .ShowInfo(true)
                    .ShowNavigationButtons(true);
                    })
                    .LoadPanel(p => p
                    .Enabled(true)
                    .Text("Đang tải dữ liệu...")
                    .ShowIndicator(true)
                    .ShowPane(true)
                    )
                    .Columns(columns =>
                    {
                        columns.Add()
                    .Caption("")
                    .Width(120)
                    .AllowFiltering(false)
                    .AllowSorting(false)
                    .CellTemplate(@<text>
                <div class="d-flex justify-content-start">
                    <div class="btn-group">


                        <button type="button"
                                class="btn btn-sm btn-outline-warning action-button"
                                data-bs-toggle="tooltip" data-bs-placement="top" title="Chỉnh sửa"
                                onclick="location.href='@Url.Action("Edit", "WorkItem", new { id = "__id__" })'.replace('__id__', '<%= data.WorkItemID %>')">
                            <i class="bi bi-pencil"></i>
                        </button>

                        <% if (data.Status !== 2) { %>
                        <button type="button"
                                class="btn btn-sm btn-outline-success action-button"
                                data-id="<%= data.WorkItemID %>"
                                onclick="markAsCompleted(this)"
                                title="Hoàn tất">
                            <i class="bi bi-check-circle"></i>
                        </button>
                        <% } %>

                        <button type="button"
                                class="btn btn-sm btn-outline-danger action-button"
                                data-id="<%= data.WorkItemID %>"
                                onclick="deleteWorkItem(this)"
                                title="Xóa">
                            <i class="bi bi-trash"></i>
                        </button>
                    </div>
                </div>
            </text>);

                        columns.Add()
                    .Caption("Thông tin công việc")
                    .MinWidth(300)
                    .CellTemplate(@<text>
                <div class="task-card">
                    <div class="mb-2">
                        <div class="d-flex align-items-center">
                            <% if (data.IsPinned === true) { %>
                            <span class="me-2" title="Đã ghim"><i class="bi bi-pin-angle-fill text-danger"></i></span>
                            <% } %>
                            <a href="/WorkItem/Detail/<%= data.WorkItemID %>"
                               class="task-name <%= data.Status === 2 ? 'completed' : '' %>">
                                <%= data.TaskName %>
                            </a>

                        </div>
                    </div>

                    <div class="mb-2">
                        <div class="d-flex flex-wrap gap-1">
                            <% if (data.Priority === 1) { %>
                            <span class="badge bg-success rounded-pill">Thấp</span>
                            <% } else if (data.Priority === 2) { %>
                            <span class="badge bg-warning text-dark rounded-pill">Trung bình</span>
                            <% } else if (data.Priority === 3) { %>
                            <span class="badge bg-danger rounded-pill">Cao</span>
                            <% } %>

                            <% if (data.Status === 0) { %>
                            <span class="badge bg-secondary rounded-pill">Chưa thực hiện</span>
                            <% } else if (data.Status === 1) { %>
                            <span class="badge bg-info text-dark rounded-pill">Đang thực hiện</span>
                            <% } else if (data.Status === 2) { %>
                            <span class="badge bg-success rounded-pill">Đã xong</span>
                            <% } %>

                            <% if (data.TaskType) { %>
                            <span class="badge bg-dark text-white rounded-pill"><%= data.TaskType %></span>
                            <% } %>
                        </div>
                    </div>

                    <% if (data.EndDate) {
                    var end = new Date(data.EndDate);
                    var now = new Date();
                    var diffMs = end - now;
                    var absMs = Math.abs(diffMs);

                    var days = Math.floor(absMs / (1000 * 60 * 60 * 24));
                    var hours = Math.floor((absMs % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
                    var minutes = Math.floor((absMs % (1000 * 60 * 60)) / (1000 * 60));

                    if (diffMs >= 0) { %>
                    <div class="d-flex align-items-center text-primary">
                        <i class="bi bi-clock me-1"></i>
                        <small><strong>Còn lại: <%= days %> ngày <%= hours %> giờ <%= minutes %> phút</strong></small>
                    </div>
                    <% } else { %>
                    <div class="d-flex align-items-center text-danger">
                        <i class="bi bi-exclamation-circle me-1"></i>
                        <small><strong>Đã trễ: <%= days %> ngày <%= hours %> giờ <%= minutes %> phút</strong></small>
                    </div>
                    <% }
                    } %>
                </div>
            </text>);

                        columns.Add()
                    .Caption("Thời gian & Tiến độ")
                    .CellTemplate(@<text>
                <div>
                    <% if (data.StartDate || data.EndDate) { %>
                    <div class="d-flex align-items-center mb-2">
                        <i class="bi bi-calendar-event me-2 text-muted"></i>
                        <div>
                            <strong>
                                <%= data.StartDate ? new Date(data.StartDate).toLocaleDateString('vi-VN') : '' %>
                                <i class="bi bi-arrow-right mx-1"></i>
                                <%= data.EndDate ? new Date(data.EndDate).toLocaleDateString('vi-VN') : '' %>
                            </strong>
                        </div>
                    </div>
                    <% } %>

                    <div class="d-flex align-items-center mb-2">
                        <i class="bi bi-graph-up me-2 text-muted"></i>
                        <div class="flex-grow-1">
                            <div class="progress">
                                <div class="progress-bar <%= data.Progress < 50 ? 'bg-warning' : 'bg-success' %>" role="progressbar"
                                     style="width: <%= data.Progress %>%;"
                                     aria-valuenow="<%= data.Progress %>" aria-valuemin="0" aria-valuemax="100">
                                </div>
                            </div>
                            <div class="text-end mt-1">
                                <small class="text-muted"><%= data.Progress %>%</small>
                            </div>
                        </div>
                    </div>

                    <% if (data.DateCreate) { %>
                    <div class="d-flex align-items-center">
                        <i class="bi bi-clock-history me-2 text-muted"></i>
                        <small class="text-muted">
                            Tạo lúc: <%= new Date(data.DateCreate).toLocaleString('vi-VN') %>
                        </small>
                    </div>
                    <% } %>
                </div>
            </text>);

                        columns.Add()
                    .Caption("Người giao")
                    .CellTemplate(@<text>
                <div class="d-flex align-items-center">
                    <i class="bi bi-person-check me-2 text-muted"></i>
                    <strong><%= data.AssignerName %></strong>
                </div>
            </text>);

                        columns.Add()
                    .Caption("Người nhận")
                    .CellTemplate(@<text>
                <% if (data.UserList) { %>
                <div class="d-flex align-items-start">
                    <i class="bi bi-people me-2 text-muted"></i>
                    <div>
                        <% data.UserList.split(',').forEach(function(user) { %>
                        <div class="mb-1">
                            <span class="badge bg-light text-dark">
                                <i class="bi bi-person me-1"></i>
                                <%= user.trim() %>
                            </span>
                        </div>
                        <% }); %>
                    </div>
                </div>
                <% } %>
            </text>);


                        columns.Add()
                    .Caption("Phòng ban")
                    .CellTemplate(@<text>
                <% if (data.DepartmentList) { %>
                <div class="d-flex align-items-start">
                    <i class="bi bi-building me-2 text-muted"></i>
                    <div>
                        <% data.DepartmentList.split(',').forEach(function(dept) { %>
                        <div class="mb-1">
                            <span class="badge bg-secondary">
                                <%= dept.trim() %>
                            </span>
                        </div>
                        <% }); %>
                    </div>
                </div>
                <% } %>
            </text>);

                        columns.Add()
                    .Caption("Ghi chú")
                    .Width(120)
                    .CellTemplate(@<text>
                <button type="button" class="btn btn-sm btn-outline-info w-100 btn-open-note" data-id="<%= data.WorkItemID %>">
                    <i class="bi bi-chat-left-text me-1"></i>
                    <span class="badge bg-secondary"><%= data.NoteCount %></span>
                </button>
            </text>);
                    }))
        </div>
    </div>
</div>

<!-- Floating action button for mobile -->
<button type="button" id="mobileCreateBtn" class="floating-action-button btn btn-success d-md-none">
    <i class="bi bi-plus fs-4"></i>
</button>

<!-- Popups -->
<div id="popupCreateWorkItem"></div>
<div id="popupNote"></div>

<script>

    var appUrls = {
        createPopUp: '@Url.Action("CreatePopUp", "WorkItem")',
        notePartial: '@Url.Action("NotePartial", "WorkItem")',
        addNote: '@Url.Action("AddNote", "WorkItem")'
    };

</script>
<script src="~/js/create-workitem.js"></script>
<script src="~/js/index.js"></script>
<script src="~/js/note.js"></script>
<script>
        function onGridContentReady(e) {
        const scrollableContainer = e.element.find(".dx-scrollable-container")[0];
        if (scrollableContainer) {
            enableDragScroll(scrollableContainer);
        }
    }


    function enableDragScroll(container) {
        let isDragging = false;
        let startX, scrollLeft;

        container.addEventListener("mousedown", function (e) {
            isDragging = true;
            container.classList.add("dragging");
            startX = e.pageX - container.offsetLeft;
            scrollLeft = container.scrollLeft;
        });

        container.addEventListener("mouseleave", function () {
            isDragging = false;
            container.classList.remove("dragging");
        });

        container.addEventListener("mouseup", function () {
            isDragging = false;
            container.classList.remove("dragging");
        });

        container.addEventListener("mousemove", function (e) {
            if (!isDragging) return;
            e.preventDefault();
            const x = e.pageX - container.offsetLeft;
            const walk = (x - startX) * 1.5; // tốc độ kéo
            container.scrollLeft = scrollLeft - walk;
        });

        // Hỗ trợ thiết bị cảm ứng (nếu muốn)
        let startTouchX;
        let scrollStartLeft;

        container.addEventListener("touchstart", function (e) {
            startTouchX = e.touches[0].pageX;
            scrollStartLeft = container.scrollLeft;
        });

        container.addEventListener("touchmove", function (e) {
            const x = e.touches[0].pageX;
            const walk = (x - startTouchX) * 1.5;
            container.scrollLeft = scrollStartLeft - walk;
        });
    }
</script>
<style>
    .dx-datagrid-rowsview.dragging {
        cursor: grabbing !important;
        user-select: none;
    }
</style>
